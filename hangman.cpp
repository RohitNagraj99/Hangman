//////////////////////////////////////////////////////////////////////////////
//                                  HANGMAN GAME                            //
//////////////////////////////////////////////////////////////////////////////
/*
			MADE BY:-
				Rohit Nagraj
				Anuraag Chetty
				Aditya Singh

			Class: XII-A

			School: K.V 2, Jalahalli East, Bangalore-14

			Special thanks to:-
				Madam Leena Unni ( Our CS teacher )
				Rahul Nagraj ( Software engineer )

			HOPE YOU ENJOY THE GAME
				THANK YOU
										*/

#include<fstream.h>
#include<math.h>
#include<conio.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<graphics.h>
#include<dos.h>
#include<process.h>
//////////////////////////////////////////////////////////////////////////////
//                                INITIAL SCREEN - HANGMAN                 //
class heading
{
public:
	void puthangman()
	{
		clrscr();
		int gd=DETECT,gm,errorcode;
		initgraph(&gd,&gm,"c:\\turboc3\\bgi");
		errorcode=graphresult();  //graphresult() will send out the status of graphics driver

		if(errorcode!=grOk)    //if there is any graphical error
		{
			cout<<"Graphic error : "<<grapherrormsg(errorcode)<<"\nPlease check the graphic directory";      //output the graphical error according to the error code generated by graphresult
			cout<<"\nPress any key to exit.";                //exit the program.
			getch();
			exit(0);
		}
		settextstyle(TRIPLEX_FONT,HORIZ_DIR,9);
		int midx,midy;
		midx=getmaxx()/2;
		midy=getmaxy()/2;
		setbkcolor(BLACK);
		setcolor(RED);
		line(75,250,560,250);
		setcolor(RED);
		outtextxy(100,midy-105,"HANGMAN");


		setcolor(GREEN);
		settextstyle(DEFAULT_FONT,HORIZ_DIR,1);

		moveto(380,380);
		outtext("PRESS ANY KEY TO CONTINUE");
		getch();
		closegraph();

	}
};

//////////////////////////////////////////////////////////////////////////////
//                              MAIN MENU
class menu
{
	public:
	int choice;
	void putmenu()
	{   cout<<"\n\n\n";


	    textcolor(LIGHTRED);
	    cprintf("         1. Play Game\n\n\r");
	    cprintf("         2. How To Play?\n\n\r");
	    cprintf("         3. SURPRISE !!\n\n\r");
	    cprintf("         4. Exit\n\n\r");
	    cprintf("         Want to see an infinite loop? Enter any letter\n\n\r");
	    textcolor(LIGHTBLUE);
	    cprintf("         Enter Your Choice: ");
	}
	void putheading()
	{       cout<<endl;
		textcolor(LIGHTGREEN+BLINK);
		cout<<"\t\t\t     ";
		cprintf("   -------------\n\r");
		cout<<"\t\t\t     ";
		cprintf(" /");
		textcolor(YELLOW);
		cout<<"";
		cprintf("   HANGMAN  ");
		textcolor(LIGHTGREEN+BLINK);

		cprintf("/\n\r");
		cout<<"\t\t\t     ";
		cprintf("-------------");
	}

	int getmenu()
	{
		textcolor(WHITE);

		cin>>choice;
		return(choice);
	}
};
///////////////////////////////////////////////////////////////////////////
//                               RANDOM WORD RETURN
class gameword
{
public:
	char word[25][20];
	char hint[25][50];

	int randomno()
	{
		randomize();
		randomize();
		randomize();
		return(random(25));
		randomize();
	}
	void assignword()                       //no need to call this
	{

		strcpy(word[0],"north korea");  //countries
		strcpy(word[1],"sri lanka");    //words are to be written
		strcpy(word[2],"thailand");
		strcpy(word[3],"russia");
		strcpy(word[4],"germany");
		strcpy(word[5],"tiger woods");   //sportspersons
		strcpy(word[6],"roger federer");
		strcpy(word[7],"anil kumble");
		strcpy(word[8],"sania mirza");
		strcpy(word[9],"saina nehwal");
		strcpy(word[10],"kangaroo");
		strcpy(word[11],"rabbit");
		strcpy(word[12],"peacock");
		strcpy(word[13],"pigeon");
		strcpy(word[14],"koala");
		strcpy(word[15],"vada pav");
		strcpy(word[16],"chow mein");
		strcpy(word[17],"sandwich");
		strcpy(word[18],"jalapeno");
		strcpy(word[19],"bell pepper");
		strcpy(word[20],"thomas edison");
		strcpy(word[21],"nikola tesla");
		strcpy(word[22],"charles darwin");
		strcpy(word[23],"neils bohr");
		strcpy(word[24],"michael faraday");
	}
	char * putword()
	{
		assignword();
		return(word[randomno()]);
	}
	void assignhint()               //no need to call this
	{
		strcpy(hint[0],"Kim Jong-Un's territory");
		strcpy(hint[1],"Lasith Malinga");     //hints are to be written
		strcpy(hint[2],"Bangkok's country");
		strcpy(hint[3],"Vladimir Putin's pride");
		strcpy(hint[4],"Top car manufacturing country");
		strcpy(hint[5],"Highest payed sportsperson");
		strcpy(hint[6],"Best tennis player");
		strcpy(hint[7],"Indian cricket team's coach");
		strcpy(hint[8],"Female Tennis player");
		strcpy(hint[9],"Female Badminton player");
		strcpy(hint[10],"Australia's jumper");
		strcpy(hint[11],"Lost to the tortoise in 'THE' story");
		strcpy(hint[12],"Bird that dances in rain");
		strcpy(hint[13],"Shits on people and cars");
		strcpy(hint[14],"Cute but lazy animal");
		strcpy(hint[15],"Bombay's food of pride");
		strcpy(hint[16],"Staple food of Chetty's native country");
		strcpy(hint[17],"Food between food");
		strcpy(hint[18],"A fruit that starts with J but pronounced with H");
		strcpy(hint[19],"Colored capsicum");
		strcpy(hint[20],"Light Bulb");
		strcpy(hint[21],"Inventor of a device to produce high frequency AC current");
		strcpy(hint[22],"Person related to evolution");
		strcpy(hint[23],"First atomic model with orbits");
		strcpy(hint[24],"Gave laws for chemistry as well as physics");
	}
	char * puthint()
	{
		assignhint();
		return(hint[randomno()]);

	}
};
/////////////////////////////////////////////////////////////////////////////
//                            USER DETAILS
class user
{
public:
	char name[20], gamertag[20];
	char age[5];

	user()
	{
		name[0]='\0';
		gamertag[0]='\0';
		age[0]='\0';
	}
	void getuser()
	{
		clrscr();
		textcolor(YELLOW);
		cout<<"\t\t\t    ";
		textcolor(YELLOW);
		cprintf("--------------------------");
		cout<<"\n\t\t\t   ";
		cprintf("/  ENTER PLAYER DETAILS  /");
		cout<<"\n\t\t\t  ";
		cprintf("--------------------------");
		textcolor(RED);
		cout<<"\n\n\n\t\t\t ";
		cprintf("Enter your Name: ");
		gets(name);
		cout<<"\t\t\t ";
		cprintf("\n\nEnter your Gamer Tag: ");
		gets(gamertag);
		cout<<"\t\t\t ";
		cprintf("\n\nEnter your Age: ");
		gets(age);
		textcolor(WHITE);

	}
};
/////////////////////////////////////////////////////////////////////////////
//                                 RULES SCREEN
class rules
{
public:
	void putrules()
	{
		clrscr();
		cout<<"\t\t\t       ";
		textcolor(YELLOW);
		cprintf("------------------");
		cout<<"\n\t\t\t      ";
		cprintf("/  INSTRUCTIONS  /");
		cout<<"\n\t\t\t     ";
		cprintf("------------------");
		textcolor(CYAN);
		cout<<"\n\n\n";
		cprintf("þ> Press enter after every input.\n\n\r");
		cprintf("þ> You will be having only 5 lives and 1 hint.\n\r   The hint or a wrong guess will cost you a life.\n\n\r");
		cprintf("þ> Don't rage quit.\n\n\r");
		cprintf("þ> Your remaining lives will be indicated by ");
		textcolor(RED);
		cprintf("\3");
		textcolor(CYAN);
		cprintf(" on the right side.\n\n\r");
		textcolor(WHITE);
		getch();
	}
};

///////////////////////////////////////////////////////////////////////////
//                           RESULT SCREEN
class result
{
public:
	void won()
	{
		clrscr();
		int gd=DETECT,gm,errorcode;
		initgraph(&gd,&gm,"c:\\turboc3\\bgi");
		errorcode=graphresult();  //graphresult() will send out the status of graphics driver

		if(errorcode!=grOk)    //if there is any graphical error
		{
			cout<<"Graphic error : "<<grapherrormsg(errorcode)<<"\nPlease check the graphic directory";      //output the graphical error according to the error code generated by graphresult
			cout<<"\nPress any key to exit.";                //exit the program.
			getch();
			exit(0);
		}
		settextstyle(TRIPLEX_FONT,HORIZ_DIR,7);
		int midx,midy;
		midx=getmaxx()/2;
		midy=getmaxy()/2;
		setbkcolor(BLACK);
		setcolor(YELLOW);
		line(170,260,478,260);
		setcolor(LIGHTGREEN);
		outtextxy(180,midy-55,"YOU WON");
		getch();
		closegraph();
	}
	void lost()
	{
		clrscr();
		int gd=DETECT,gm,errorcode;
		initgraph(&gd,&gm,"c:\\turboc3\\bgi");
		errorcode=graphresult();  //graphresult() will send out the status of graphics driver

		if(errorcode!=grOk)    //if there is any graphical error
		{
			cout<<"Graphic error : "<<grapherrormsg(errorcode)<<"\nPlease check the graphic directory";      //output the graphical error according to the error code generated by graphresult
			cout<<"\nPress any key to exit.";                //exit the program.
			getch();
			exit(0);
		}
		settextstyle(TRIPLEX_FONT,HORIZ_DIR,7);
		int midx,midy;
		midx=getmaxx()/2;
		midy=getmaxy()/2;
		setbkcolor(BLACK);
		setcolor(BLUE);
		line(170,260,489,260);
		setcolor(RED);
		outtextxy(180,midy-55,"YOU LOST");
		getch();
		closegraph();
	}

};


/////////////////////////////////////////////////////////////////////////////
//                                 MAIN GAME
class game:public gameword, public result,public menu,public rules
{
public:
	int life,bugfix;
	int hintdisplay;
	char ch[2];
	int length;
	char gamew[20];
	int norepeat,x,nextline;
	char couts[50];
	char exist[20],t[20];
	char hint[50];
	int lifereduce;

	game()
	{
		bugfix=0;
		hintdisplay=0;
		ch[0]=' ';
		ch[1]='\0';
		life=5;
		nextline=0;
		x=0;
		exist[0] = '\0';
		length=0;
		strcpy(couts,"Sorry the character has already been entered\n\0");
	}
	void copygameword();
	void check();
	void display();


};

void game::copygameword()  //TO COPY RANDOM WORD AS GAME WORD
	{	strcpy(gamew,putword());
		strcpy(hint,puthint());


		for(int i=0;i<strlen(gamew);i++)
		{
			if(gamew[i]!=' ')
			{
				t[i]='*';
			}
			else
			{
				t[i]=' ';
				length++;
			}
		}
		t[i] = '\0';
	}


void game::check()          //TO CHECK WHETHER THE ENTERED CHARACTER IS INSIDE THE GAMEWORD
	{
		int i=0;
		char z;
		textcolor(MAGENTA);
		cprintf(" ");
		cin>>ch[0];
		clrscr();
		if((ch[0]>='a')&&(ch[0]<='z'))
		{
			cout<<endl;
			norepeat=0;
			for(i=0;i<strlen(exist);i++)
			{
				if(exist[i]==ch[0])
				{
					norepeat++;
					break;
				}
			}
			if(norepeat!=0)
			{
				textcolor(CYAN);
				gotoxy(3,15);
				cprintf(couts);
				nextline--;
				cout<<endl;
			}
			else
			{
				exist[x]=ch[0];
				x++;
				exist[x+1] = '\0';
			}
			lifereduce=0;
			for(i=0;i<strlen(gamew);i++)
			{

				if(norepeat!=0)
				{
					lifereduce++;
					break;
				}
				if(gamew[i]==ch[0])
				{
					t[i]=gamew[i];
					length++;
					lifereduce++;
				}
			}
			if(lifereduce==0)
			{
				life--;
				textcolor(LIGHTBLUE);
				gotoxy(3,14);
				cprintf("OOPS! The entered character is not in the above word");
			}

		 }
		 else if(ch[0]=='1')
		 {
			if(life==1)
			{
				textcolor(RED);
				gotoxy(3,16);
				cprintf("Sorry. You only have 1 life");
			}
			else
			{
			if(bugfix==0)
			{
			textcolor(LIGHTGREEN);
			nextline--;
			cout<<endl;
			gotoxy(3,16);
			cprintf("Hint: ");
			textcolor(LIGHTMAGENTA);
			cprintf(hint);
			cprintf("\n\r");
			hintdisplay++;
			life--;
			bugfix++;
			}


		 else
		 {
		 textcolor(RED);
		 gotoxy(3,17);
		 cprintf("The hint has already been displayed once!");
		}
		}
		}
		else
		{
			cout<<endl;
			textcolor(LIGHTRED);
			gotoxy(3,15);
			cprintf("Please enter a small letter\n\r");
			nextline--;
			cout<<endl;
		}

	}

void game::display()          //TO DISPLAY MAIN GAME ELEMENTS
	{
		game();
		putrules();
		clrscr();
		gotoxy(12,1);
		putheading();
		textcolor(RED);
		gotoxy(3,16);
		cprintf("Press 1 for hint\n\r");     //display before going into loop
		copygameword();
		cout<<"\t\t\t\t\t     ";
		textcolor(RED);
		cprintf("\n\n\n\n\n\n\n\n    ");
		gotoxy(50,9);
		cprintf("\3 \3 \3 \3 \3\n\r");


		for(int i=0;i>=0;i++)
		{
			gotoxy(12,1);
			putheading();
			nextline=0;
			textcolor(YELLOW);
			gotoxy(3,9);
			cprintf("The word to be gussed: ");
			cprintf(t);
			cout<<endl;
			gotoxy(3,10);
			cprintf("Enter a character : ");
			check();
			if(hintdisplay==0)      //to display hints
			{
				if(life!=1)
				{textcolor(RED);
				gotoxy(3,16);
				cprintf("Press 1 for hint\n\r"); }
			}
			else
			{
				textcolor(LIGHTGREEN);
				gotoxy(3,16);
				cprintf("Hint: ");
				textcolor(LIGHTMAGENTA);
				cprintf(hint);
				cprintf("\n\r");
			}

			textcolor(RED);
			gotoxy(49,9);
			for(int j=0;j<life;j++)             //to display hearts
			{
				cprintf(" \3");
			}

			cout<<endl;

			if(strcmp(gamew,t) == 0)
			{
				break;
			}
			if(life==0)
			{
				break;
			}
		}

		if(life==0)
		{
			lost();
		}
		 else
		{
			won();
		}
	}

////////////////////////////////////////////////////////////////////////////
//                              ULTIMATE CLASS
class final:public game,public heading,public user
{
public:
	int option,check;
	void ultimate();
};
void final::ultimate()         //THE ONLY FUCNTION TO BE CALLED
{
	clrscr();
	check=0;
	puthangman();
	do
	{

	if(check==0)
	{
	clrscr();
	putheading();
	putmenu();
	option=getmenu();
	}
	if(option==1)
	       {
			getuser();
			display();
			check=0;
			option=6;
	       }
	       else if(option==2)
		{
			putrules();
			check=0;
		}
		else if(option==3)
		{
			clrscr();
			textcolor(YELLOW+BLINK);
			gotoxy(36,3);
			cprintf("SURPRISE");
			textcolor(RED);
			gotoxy(36,5);
			cprintf("CREDITS");
			textcolor(CYAN);
			gotoxy(10,7);
			cprintf("þ> Google Baba");
			gotoxy(10,9);
			cprintf("þ> Leena Ma'am");
			gotoxy(10,17);
			cprintf("þ> Last but not to be ignored, our dearest computers and laptops");
			gotoxy(10,11);
			cprintf("þ> McDaddy9 aka Rohit Nagraj");
			gotoxy(10,13);
			cprintf("þ> D3m0n!C BL@d3 aka Anuraag Chetty");
			gotoxy(10,15);
			cprintf("þ> devillord17 aka Aditya Singh");
			check=0;
			getch();

		}

		else if(option==4)
		{
			check=0;
			exit(0);
		}
		else
		{
			while((option!=1)&&(option!=2)&&(option!=3)&&(option!=4))
				{
					textcolor(RED);
					cprintf("Oops! Wrong choice\n\rEnter again: ");
					cin>>option;
					check++;
				}
		}
       }
while((option==1)||(option==2)||(option==3)||(option==4));
}
//////////////////////////////////////////////////////////////////////////////
//                             MAIN FUNCTION
void main()
{
final f1;
f1.ultimate();
}